diff --git a/Photochemistry/src/FileIO.jl b/Photochemistry/src/FileIO.jl
index cae5ffd..1920198 100644
--- a/Photochemistry/src/FileIO.jl
+++ b/Photochemistry/src/FileIO.jl
@@ -22,14 +22,20 @@ end
 
 function create_folder(foldername::String, parentdir::String)
     #=
-    Checks to see if foldername exists within parentdir. If not, creates it.
+    Ensure that parentdir and foldername exist. Creates them if necessary.
+    This prevents readdir errors when parentdir does not already exist.
     =#
-    # println("Checking for existence of $(foldername) folder in $(parentdir)")
-    dircontents = readdir(parentdir)
-    if foldername in dircontents
+    # Create the parent directory path if it does not exist
+    if !isdir(parentdir)
+        mkpath(parentdir)
+    end
+
+    target = joinpath(parentdir, foldername)
+
+    if isdir(target)
         println("Folder $(foldername) already exists")
     else
-        mkdir(parentdir*foldername)
+        mkpath(target)
         println("Created folder ", foldername)
     end
 end
@@ -55,7 +61,7 @@ function get_elapsed_time(filepath)
     return parse(Float64, split(h5read(filepath, "info")[end])[1])
 end
 
-function get_ncurrent(readfile::String)
+function get_ncurrent(readfile::String, n_horiz::Int64)
     #=
     Input:
         readfile: HDF5 file containing a matrix with atmospheric density profiles
@@ -72,10 +78,33 @@ function get_ncurrent(readfile::String)
         global n_current_mat = h5read(readfile,"ncur/ncur_mat");
     end
     
-    n_current = Dict{Symbol, Array{ftype_ncur, 1}}()
+    n_current = Dict{Symbol, Vector{Array{ftype_ncur}}}()
+
+    # Determine desired number of altitude layers from the currently loaded
+    # parameters, if available. Fall back to the length of the profiles in the
+    # file.
+    target_layers = isdefined(Main, :num_layers) ? Main.num_layers : size(n_current_mat, 1)
 
-    for ispecies in [1:length(n_current_tag_list);]
-        n_current[n_current_tag_list[ispecies]] = reshape(n_current_mat[:,ispecies], length(n_current_mat[:, ispecies]))
+    # Slice or pad the profiles so that their length matches the altitude grid
+    for ispecies in eachindex(n_current_tag_list)
+        profile = convert(Vector{ftype_ncur}, n_current_mat[:, ispecies])
+
+        if length(profile) > target_layers
+            profile = profile[1:target_layers]
+        elseif length(profile) < target_layers
+            profile = vcat(profile, fill(last(profile), target_layers - length(profile)))
+        end
+
+        # n_current[n_current_tag_list[ispecies]] = fill(profile, n_horiz)
+        
+        # Duplicate the profile for each column so that updates to one column do not modify the others by aliasing the same array.
+        n_current[n_current_tag_list[ispecies]] = [copy(profile) for _ in 1:n_horiz]
+    end
+    if isdefined(Main, :all_species)
+        zero_prof = fill(ftype_ncur(0.0), target_layers)
+        for sp in setdiff(Main.all_species, keys(n_current))
+            n_current[sp] = fill(copy(zero_prof), n_horiz)
+        end
     end
     return n_current
 end
@@ -121,7 +150,7 @@ function search_subfolders(path::String, key; type="folders")
     end
 end
 
-function write_atmosphere(atmdict::Dict{Symbol, Vector{ftype_ncur}}, filename::String; t=0, globvars...) 
+function write_atmosphere(atmdict::Dict{Symbol, Vector{Array{ftype_ncur}}}, filename::String, n_horiz::Int64; t=0, globvars...) 
     #=
     Writes out the current atmospheric state to an .h5 file
 
@@ -134,11 +163,13 @@ function write_atmosphere(atmdict::Dict{Symbol, Vector{ftype_ncur}}, filename::S
     check_requirements(keys(GV), required)
     
     sorted_keys = sort(collect(keys(atmdict)))
-    atm_mat = Array{Float64}(undef, GV.num_layers, length(sorted_keys));
+    atm_mat = Array{Float64}(undef, n_horiz, GV.num_layers, length(sorted_keys));
 
-    for ispecies in [1:length(sorted_keys);]
-        for ialt in [1:GV.num_layers;]
-            atm_mat[ialt, ispecies] = convert(Float64, atmdict[sorted_keys[ispecies]][ialt])
+    for ihoriz in 1:n_horiz
+    	for ispecies in [1:length(sorted_keys);]
+            for ialt in [1:GV.num_layers;]
+            	atm_mat[ihoriz, ialt, ispecies] = convert(Float64, atmdict[sorted_keys[ispecies]][ihoriz][ialt])
+	    end
         end
     end
     delete_old_h5file(filename)
@@ -150,7 +181,7 @@ function write_atmosphere(atmdict::Dict{Symbol, Vector{ftype_ncur}}, filename::S
     end
 end
 
-function write_final_state(atmdict, thedir, thefolder, fname; globvars...)
+function write_final_state(atmdict, thedir, thefolder, fname, n_horiz::Int64; globvars...)
     #=
     Write out the final atmosphere to a file, first making sure the current Jrates are included.
     =#
@@ -166,7 +197,7 @@ function write_final_state(atmdict, thedir, thefolder, fname; globvars...)
     end
 
     # Write out final atmosphere
-    write_atmosphere(atmdict, thedir*thefolder*"/"*fname; globvars...)
+    write_atmosphere(atmdict, thedir*thefolder*"/"*fname, n_horiz; globvars...)
     println("Saved final atmospheric state")
 end
 
@@ -245,7 +276,7 @@ function load_from_paramlog(folder; quiet=true, globvars...)
             println()
         end
     end
-    
+
     if ~(:alt in keys(GV))
         try 
             global df_alt = DataFrame(XLSX.readtable("$(folder)PARAMETERS.xlsx", "AltGrid"));
@@ -304,12 +335,12 @@ function load_from_paramlog(folder; quiet=true, globvars...)
     chem_species = setdiff(all_species, no_chem_species);
     Jratelist = [Symbol(x) for x in filter(x->typeof(x)==String, df_splists.Jratelist)]
 
-    # Temperatures
+    ## Temperatures
     if "TemperatureArrays" in XLSX.sheetnames(paramlog_wb)
         df_temps = DataFrame(XLSX.readtable("$(folder)PARAMETERS.xlsx", "TemperatureArrays"));
-        Tn_arr = df_temps.Neutrals
-        Ti_arr = df_temps.Ions
-        Te_arr = df_temps.Electrons
+        Tn_arr = reshape(df_temps.Neutrals, GV.n_horiz, GV.num_layers+2)
+        Ti_arr = reshape(df_temps.Ions, GV.n_horiz, GV.num_layers+2)
+        Te_arr = reshape(df_temps.Electrons, GV.n_horiz, GV.num_layers+2)
     else 
         if quiet==false
             println("WARNING: Reconstructing temperature profiles with default options based on logged control temperatures. It is POSSIBLE the reconstruction could be wrong if the temp function changed.")
@@ -337,7 +368,7 @@ function load_from_paramlog(folder; quiet=true, globvars...)
         # hope the user has passed it in
         global Hs_dict = Dict{Symbol, Vector{Float64}}([sp=>scaleH(GV.alt, sp, Tprof_for_Hs[charge_type(sp)]; GV.M_P, GV.R_P, globvars...) for sp in all_species]); 
     end
-    
+   
     # Boundary conditions
     speciesbclist = load_bcdict_from_paramdf(df_bcs);
     
@@ -370,7 +401,7 @@ function load_from_paramlog(folder; quiet=true, globvars...)
                    "upper_lower_bdy"=>upper_lower_bdy,
                    "upper_lower_bdy_i"=>upper_lower_bdy_i
                    )
-    
+
     try
         vardict["alt"] = alt
         vardict["M_P"] = M_P
